{"version":3,"file":"index.js","sources":["../src/utils/validation.ts","../src/types/network.ts","../src/utils/network.ts","../src/api/client.ts","../src/index.ts"],"sourcesContent":["import { Network } from '../types/network';\n\nexport function validateAddress(address: string): void {\n  if (!address || typeof address !== 'string') {\n    throw new Error('Address must be a non-empty string');\n  }\n  \n  if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {\n    throw new Error('Invalid Ethereum address format');\n  }\n}\n\nexport function validateTransactionHash(hash: string): void {\n  if (!hash || typeof hash !== 'string') {\n    throw new Error('Transaction hash must be a non-empty string');\n  }\n  \n  if (!/^0x[a-fA-F0-9]{64}$/.test(hash)) {\n    throw new Error('Invalid transaction hash format');\n  }\n}\n\nexport function validateNetwork(network: string): asserts network is Network {\n  if (!isValidNetwork(network)) {\n    throw new Error(`Invalid network: ${network}. Must be 'testnet' or 'mainnet'`);\n  }\n}\n\nexport function isValidNetwork(network: string): network is Network {\n  return network === 'testnet' || network === 'mainnet';\n}\n","export type Network = 'testnet' | 'mainnet';\n\nexport interface NetworkConfig {\n  baseUrl: string;\n  chainId?: number;\n  name: string;\n}\n\nexport const NETWORK_CONFIGS: Record<Network, NetworkConfig> = {\n  testnet: {\n    baseUrl: 'https://crossera-testnet.vercel.app',\n    chainId: 1144,\n    name: 'CrossFi Testnet'\n  },\n  mainnet: {\n    baseUrl: 'https://crossera.vercel.app',\n    chainId: 1144,\n    name: 'CrossFi Mainnet'\n  }\n};\n","import { Network, NETWORK_CONFIGS } from '../types/network';\nimport { validateNetwork } from './validation';\n\nexport function getNetworkBaseUrl(network: Network): string {\n  validateNetwork(network);\n  return NETWORK_CONFIGS[network].baseUrl;\n}\n\nexport function getAvailableNetworks(): Network[] {\n  return Object.keys(NETWORK_CONFIGS) as Network[];\n}\n\nexport function getNetworkConfig(network: Network) {\n  validateNetwork(network);\n  return NETWORK_CONFIGS[network];\n}\n","import axios, { AxiosInstance, AxiosError } from 'axios';\nimport { Network, NETWORK_CONFIGS } from '../types/network';\n\nexport class CrossEraAPIClient {\n  private clients: Map<Network, AxiosInstance> = new Map();\n\n  constructor() {\n    this.initializeClients();\n  }\n\n  private initializeClients() {\n    Object.entries(NETWORK_CONFIGS).forEach(([network, config]) => {\n      const client = axios.create({\n        baseURL: config.baseUrl,\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Add response interceptor for error handling\n      client.interceptors.response.use(\n        (response) => response,\n        (error: AxiosError) => {\n          const networkName = network as Network;\n          const message = this.getErrorMessage(error, networkName);\n          const enhancedError = new Error(message);\n          (enhancedError as any).network = networkName;\n          (enhancedError as any).status = error.response?.status;\n          throw enhancedError;\n        }\n      );\n\n      this.clients.set(network as Network, client);\n    });\n  }\n\n  private getErrorMessage(error: AxiosError, network: Network): string {\n    if (error.response) {\n      // Server responded with error status\n      const status = error.response.status;\n      const data = error.response.data as any;\n      \n      if (status === 404) {\n        return `Resource not found on ${network}`;\n      } else if (status === 400) {\n        return data?.error || `Bad request to ${network}`;\n      } else if (status === 500) {\n        return `Internal server error on ${network}`;\n      } else {\n        return `Request failed with status ${status} on ${network}`;\n      }\n    } else if (error.request) {\n      // Request was made but no response received\n      return `Network error: Unable to reach ${network}`;\n    } else {\n      // Something else happened\n      return `Error: ${error.message}`;\n    }\n  }\n\n  getClient(network: Network): AxiosInstance {\n    const client = this.clients.get(network);\n    if (!client) {\n      throw new Error(`No client found for network: ${network}`);\n    }\n    return client;\n  }\n}\n","import { \n  Network, \n  GetAppIdParams, \n  SubmitTransactionParams, \n  SDKConfig, \n  TransactionResult, \n  NetworkConfig \n} from './types';\nimport { validateAddress, validateTransactionHash, validateNetwork } from './utils/validation';\nimport { getAvailableNetworks, getNetworkConfig } from './utils/network';\nimport { CrossEraAPIClient } from './api/client';\n\nexport class CrossEraSDK {\n  private apiClient: CrossEraAPIClient;\n  private defaultNetwork?: Network;\n\n  constructor(config?: SDKConfig) {\n    this.apiClient = new CrossEraAPIClient();\n    this.defaultNetwork = config?.defaultNetwork;\n  }\n\n  /**\n   * Get app ID by wallet address on specified network\n   * @param params - Parameters object\n   * @param params.address - Wallet address\n   * @param params.network - Network to query ('testnet' or 'mainnet')\n   * @returns Promise<string | null> - App ID or null if not found\n   * \n   * @example\n   * ```typescript\n   * const sdk = new CrossEraSDK();\n   * const appId = await sdk.getAppIdByAddress({\n   *   address: '0x46992B61b7A1d2e4F59Cd881B74A96a549EF49BF',\n   *   network: 'testnet'\n   * });\n   * ```\n   */\n  async getAppIdByAddress(params: GetAppIdParams): Promise<string | null> {\n    const { address, network } = params;\n\n    // Validate parameters\n    validateAddress(address);\n    validateNetwork(network);\n\n    try {\n      const response = await this.apiClient.getClient(network).get(\n        `/api/projects/address/${address}`\n      );\n\n      return response.data.appId || null;\n    } catch (error: any) {\n      if (error.status === 404) {\n        return null;\n      }\n      throw new Error(`Failed to get app ID for address ${address} on ${network}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Submit transaction for rewards on specified network\n   * @param params - Parameters object\n   * @param params.transactionHash - Transaction hash to submit\n   * @param params.network - Network to submit to ('testnet' or 'mainnet')\n   * @returns Promise<TransactionResult> - Processing result\n   * \n   * @example\n   * ```typescript\n   * const sdk = new CrossEraSDK();\n   * const result = await sdk.submitTransaction({\n   *   transactionHash: '0xede6251cb0667ac7a2b51bbb9308c5b244321fe4dbb9145e1a084e6bc84053de',\n   *   network: 'testnet'\n   * });\n   * ```\n   */\n  async submitTransaction(params: SubmitTransactionParams): Promise<TransactionResult> {\n    const { transactionHash, network } = params;\n\n    // Validate parameters\n    validateTransactionHash(transactionHash);\n    validateNetwork(network);\n\n    try {\n      const response = await this.apiClient.getClient(network).post('/api/submit', {\n        transaction_hash: transactionHash,\n      });\n\n      return {\n        ...response.data.data,\n        network,\n      };\n    } catch (error: any) {\n      throw new Error(`Failed to submit transaction ${transactionHash} on ${network}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get network configuration\n   * @param network - Network to get config for\n   * @returns NetworkConfig - Network configuration\n   * \n   * @example\n   * ```typescript\n   * const config = sdk.getNetworkConfig('testnet');\n   * console.log(config.baseUrl); // 'https://crossera-testnet.vercel.app'\n   * ```\n   */\n  getNetworkConfig(network: Network): NetworkConfig {\n    validateNetwork(network);\n    return getNetworkConfig(network);\n  }\n\n  /**\n   * List available networks\n   * @returns Network[] - Available networks\n   * \n   * @example\n   * ```typescript\n   * const networks = sdk.getAvailableNetworks();\n   * console.log(networks); // ['testnet', 'mainnet']\n   * ```\n   */\n  getAvailableNetworks(): Network[] {\n    return getAvailableNetworks();\n  }\n}\n\n// Export types for external use\nexport type {\n  Network,\n  GetAppIdParams,\n  SubmitTransactionParams,\n  SDKConfig,\n  TransactionResult,\n  NetworkConfig,\n  CampaignMetric,\n  APIError,\n} from './types';\n\n// Export utilities\nexport { \n  validateAddress, \n  validateTransactionHash, \n  validateNetwork,\n  isValidNetwork \n} from './utils/validation';\n\nexport { \n  getNetworkBaseUrl, \n  getAvailableNetworks, \n  getNetworkConfig \n} from './utils/network';\n\n// Named export only (removed default export to avoid mixing warnings)\n"],"names":[],"mappings":"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"}